# ##############################################################################
# IMPORTS
# ##############################################################################
# # Basics
import os
import sys
import SCons

# Import the BuildMonster
import BuildMonster
BuildMonster.ValidateRunDirectory()

PLATFORM = BuildMonster.PLATFORM
ARCH = BuildMonster.ARCH
TARGET = BuildMonster.sharedTarget
PLATFORM_ARCH = BuildMonster.PLATFORM_ARCH

def BuildGLIBwithSCONS(buildmode):
	env=BuildMonster.COMMON['glib20']['env'][buildmode].CPVEClone()
	includepath=BuildMonster.RepoPath(buildmode, subtype='include')
	projectincludepath=BuildMonster.RepoPath(buildmode, projectname="glib20", subtype='include')
	
	env.AppendUnique(CPPDEFINES=[
        'PCRE_STATIC',
        'HAVE_CONFIG_H',
        'HAVE_LONG_LONG_FORMAT',
        'SUPPORT_UCP',
        'SUPPORT_UTF8',
        'NEWLINE=-1',
        'MATCH_LIMIT=10000000',
        'MATCH_LIMIT_RECURSION=10000000',
        'MAX_NAME_SIZE=32',
        'MAX_NAME_COUNT=10000',
        'MAX_DUPLENGTH=30000',
        'LINK_SIZE=2',
        'POSIX_MALLOC_THRESHOLD=10',
		'G_LOG_DOMAIN="GLib-GRegex"',
		'G_DISABLE_DEPRECATED',
		'GLIB_COMPILATION',
	])
	env.CPVEStaticLibrary(
		target='glib20/libpcre$LIBSUFFIX',
		source=SOURCE_FILES, 
		packagename="glib20-pcre",
        createseparateapi=BuildMonster.SeparateLGPLCode("glib20-pcre"),
		packagedepends=['tools'],
		privateincludepaths=[
			includepath, 
			projectincludepath, 
			'../..', 
			'..',
			],
		addobjs=BuildMonster.IsStaticLink(),
		)
	return

SOURCE_FILES=[File(F) for F in [
		'pcre_chartables.c',
		'pcre_compile.c',
		'pcre_config.c',
		'pcre_dfa_exec.c',
		'pcre_exec.c',
		'pcre_fullinfo.c',
		'pcre_get.c',
		'pcre_globals.c',
		'pcre_newline.c',
		'pcre_ord2utf8.c',
		'pcre_study.c',
		'pcre_tables.c',
		'pcre_try_flipped.c',
		'pcre_ucp_searchfuncs.c',
		'pcre_xclass.c',
		]
	]

for M in BuildMonster.BuildModeList:
	BuildGLIBwithSCONS(M)
